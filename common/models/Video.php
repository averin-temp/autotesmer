<?php
/**
 * Created by PhpStorm.
 * User: hustler
 * Date: 25.03.2019
 * Time: 21:49
 */

namespace common\models;

use Embed\Embed;
use yii\db\ActiveRecord;
use yii\db\Query;
use yii\helpers\Url;

/**
 * Class Video
 * @package common\models
 */
class Video extends ActiveRecord
{
    const SCENARIO_EXPERT_UPLOAD = 1;


    public $tags_string = '';
    private $_info;

    /**
     * @return string
     */
    public static function tableName()
    {
        return 'video';
    }

    public function rules()
    {
        return [
            [['name', 'description', 'link'], 'required', 'on' => self::SCENARIO_EXPERT_UPLOAD],
            [['name', 'description', 'link', 'tags_string'], 'trim', 'on' => self::SCENARIO_EXPERT_UPLOAD],
            ['link',  'validateEmbed', 'on' => [self::SCENARIO_EXPERT_UPLOAD]]
        ];
    }

    public function validateEmbed($attribute, $parama){
        try{
            $info = Embed::create($this->$attribute);
        } catch (\Exception $e){
            $this->addError($attribute, $e->getMessage());
        }
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub

        // удаление старых тегов
        \Yii::$app->db->createCommand()->delete('video_tag', ['video_id' => $this->id])->execute();

        $tags = array_map('trim', explode(',', $this->tags_string));

        // создание новых
        foreach($tags as $tag){
            if(empty($tag)) continue;
            $exists = (new Query())->from('tags')->where(['name' => trim($tag)])->one();
            if($exists) {
                \Yii::$app->db->createCommand()->insert('video_tag', ['video_id' => $this->id, 'tag_id' => $exists['id']])->execute();
            } else {
                \Yii::$app->db->createCommand()->insert('tags', ['name' => $tag])->execute();
                $id = \Yii::$app->db->getLastInsertID();
                \Yii::$app->db->createCommand()->insert('video_tag', ['video_id' => $this->id, 'tag_id' => $id])->execute();
            }
        }
    }

    public function errorField($attribute){
        if($this->hasErrors($attribute))
            echo "<div class='form-error'><p>{$this->getFirstError($attribute)}</p></div>";
    }

    /**
     * @return array
     */
    public function getTags(){
        $queryIds = (new Query())->select('tag_id')->from('video_tag')->where(['video_id' => $this->id]);
        $tag_names = (new Query())->select('name')->from('tags')->where(['id' => $queryIds ])->column();
        return $tag_names;
    }

    public function getUser(){
        return $this->hasOne(User::class, ['id' => 'user_id']);
    }

    public function getAgeLabel(){
        $posted = date_create($this->posted);
        $current = date_create();
        $diff = date_diff($posted, $current);
        $label = "Добавлено " . $diff->days . " дней назад";
        return $label;
    }


    public function exportTags(){
        return  implode(', ', $this->tags);
    }


    public function getHtml(){
        if($info = $this->getInfo()){
            return $info->code;
        }
    }

    public function getInfo(){
        if($this->_info == null) {
            try{
                $this->_info = Embed::create($this->link);
            } catch (\Exception $e){
                return false;
            }

        }
        return $this->_info;
    }

    public function getImage(){
        if($info = $this->getInfo()){
            return $info->image;
        }
    }

    public function beforeDelete(){
        \Yii::$app->db->createCommand()->delete('video_tag', ['video_id' => $this->id])->execute();
        return true;
    }


    public function watchLink(){
        return Url::to(['videos/watch', 'id' => $this->id]);
    }

}